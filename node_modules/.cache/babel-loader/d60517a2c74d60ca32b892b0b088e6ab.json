{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = 'http://localhost:8081';\n\nclass AuthenticationService {\n  authenticateUser(user) {\n    return axios.get(API_URL + '/user/signin', {\n      headers: {\n        authorization: this.createBasicAuthToken(user.email, user.password)\n      }\n    });\n  }\n\n  createBasicAuthToken(email, password) {\n    return 'Basic ' + window.btoa(email + \":\" + password);\n  }\n\n  getUserdetails() {\n    let user = sessionStorage.getItem('authUser');\n    let role = sessionStorage.getItem('role');\n    return [user, role];\n  }\n\n  userSignUp(user) {\n    return axios.post(API_URL + '/user/signup', user);\n  }\n  /* isUserLoggedIn() {\r\n      let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n      if (user === null) return false\r\n      return true\r\n  } */\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"names":["axios","API_URL","AuthenticationService","authenticateUser","user","get","headers","authorization","createBasicAuthToken","email","password","window","btoa","getUserdetails","sessionStorage","getItem","role","userSignUp","post","setupAxiosInterceptors","token","interceptors","request","use","config","isUserLoggedIn"],"sources":["C:/Users/saura/Documents/Blog-web-app/blog-app/src/service/AuthenticationService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = 'http://localhost:8081'\r\n\r\nclass AuthenticationService {\r\n\r\n\r\n\r\n    authenticateUser(user) {\r\n        return axios.get(API_URL + '/user/signin',\r\n            { headers: { authorization: this.createBasicAuthToken(user.email, user.password) } })\r\n    }\r\n\r\n    createBasicAuthToken(email, password) {\r\n        return 'Basic ' + window.btoa(email + \":\" + password)\r\n    }\r\n\r\n    getUserdetails() {\r\n        let user = sessionStorage.getItem('authUser');\r\n        let role = sessionStorage.getItem('role');\r\n        return [user, role];\r\n\r\n    }\r\n\r\n    userSignUp(user) {\r\n        return axios.post(API_URL + '/user/signup', user);\r\n    }\r\n\r\n    /* isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    } */\r\n\r\n    setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default new AuthenticationService();"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;;AAEA,MAAMC,qBAAN,CAA4B;EAIxBC,gBAAgB,CAACC,IAAD,EAAO;IACnB,OAAOJ,KAAK,CAACK,GAAN,CAAUJ,OAAO,GAAG,cAApB,EACH;MAAEK,OAAO,EAAE;QAAEC,aAAa,EAAE,KAAKC,oBAAL,CAA0BJ,IAAI,CAACK,KAA/B,EAAsCL,IAAI,CAACM,QAA3C;MAAjB;IAAX,CADG,CAAP;EAEH;;EAEDF,oBAAoB,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAClC,OAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,KAAK,GAAG,GAAR,GAAcC,QAA1B,CAAlB;EACH;;EAEDG,cAAc,GAAG;IACb,IAAIT,IAAI,GAAGU,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAX;IACA,IAAIC,IAAI,GAAGF,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAX;IACA,OAAO,CAACX,IAAD,EAAOY,IAAP,CAAP;EAEH;;EAEDC,UAAU,CAACb,IAAD,EAAO;IACb,OAAOJ,KAAK,CAACkB,IAAN,CAAWjB,OAAO,GAAG,cAArB,EAAqCG,IAArC,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EAEIe,sBAAsB,CAACC,KAAD,EAAQ;IAE1BpB,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;MACR,IAAI,KAAKC,cAAL,EAAJ,EAA2B;QACvBD,MAAM,CAAClB,OAAP,CAAeC,aAAf,GAA+Ba,KAA/B;MACH;;MACD,OAAOI,MAAP;IACH,CANL;EAQH;;AAxCuB;;AA6C5B,eAAe,IAAItB,qBAAJ,EAAf"},"metadata":{},"sourceType":"module"}