{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = 'http://localhost:8081';\n\nclass AuthenticationService {\n  authenticateUser(user) {\n    // let username = user.userName;\n    // let password = user.password;\n    return axios.get(API_URL + '/signin', {\n      headers: {\n        authorization: this.createBasicAuthToken(user.userName, user.password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  getUserdetails() {\n    let user = sessionStorage.getItem('authUser');\n    let role = sessionStorage.getItem('role');\n    return [user, role];\n  }\n\n  userSignUp(user) {\n    return axios.post(API_URL + '/user/signup', user);\n  }\n  /* isUserLoggedIn() {\r\n      let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n      if (user === null) return false\r\n      return true\r\n  } */\n\n  /* setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n          (config) => {\r\n              if (this.isUserLoggedIn()) {\r\n                  config.headers.authorization = token\r\n              }\r\n              return config\r\n          }\r\n      )\r\n  } */\n\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"names":["axios","API_URL","AuthenticationService","authenticateUser","user","get","headers","authorization","createBasicAuthToken","userName","password","username","window","btoa","getUserdetails","sessionStorage","getItem","role","userSignUp","post"],"sources":["C:/Users/saura/Documents/Blog-web-app/blog-app/src/service/AuthenticationService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = 'http://localhost:8081'\r\n\r\nclass AuthenticationService {\r\n\r\n\r\n\r\n    authenticateUser(user) {\r\n        // let username = user.userName;\r\n        // let password = user.password;\r\n        return axios.get(API_URL + '/signin',\r\n            { headers: { authorization: this.createBasicAuthToken(user.userName, user.password) } })\r\n\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(username + \":\" + password)\r\n    }\r\n\r\n    getUserdetails() {\r\n        let user = sessionStorage.getItem('authUser');\r\n        let role = sessionStorage.getItem('role');\r\n        return [user, role];\r\n\r\n    }\r\n\r\n    userSignUp(user) {\r\n        return axios.post(API_URL + '/user/signup', user);\r\n    }\r\n\r\n    /* isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    } */\r\n\r\n    /* setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    } */\r\n\r\n}\r\n\r\n\r\nexport default new AuthenticationService();"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;;AAEA,MAAMC,qBAAN,CAA4B;EAIxBC,gBAAgB,CAACC,IAAD,EAAO;IACnB;IACA;IACA,OAAOJ,KAAK,CAACK,GAAN,CAAUJ,OAAO,GAAG,SAApB,EACH;MAAEK,OAAO,EAAE;QAAEC,aAAa,EAAE,KAAKC,oBAAL,CAA0BJ,IAAI,CAACK,QAA/B,EAAyCL,IAAI,CAACM,QAA9C;MAAjB;IAAX,CADG,CAAP;EAGH;;EAEDF,oBAAoB,CAACG,QAAD,EAAWD,QAAX,EAAqB;IACrC,OAAO,WAAWE,MAAM,CAACC,IAAP,CAAYF,QAAQ,GAAG,GAAX,GAAiBD,QAA7B,CAAlB;EACH;;EAEDI,cAAc,GAAG;IACb,IAAIV,IAAI,GAAGW,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAX;IACA,IAAIC,IAAI,GAAGF,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAX;IACA,OAAO,CAACZ,IAAD,EAAOa,IAAP,CAAP;EAEH;;EAEDC,UAAU,CAACd,IAAD,EAAO;IACb,OAAOJ,KAAK,CAACmB,IAAN,CAAWlB,OAAO,GAAG,cAArB,EAAqCG,IAArC,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA1C4B;;AAgD5B,eAAe,IAAIF,qBAAJ,EAAf"},"metadata":{},"sourceType":"module"}