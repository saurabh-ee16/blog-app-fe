{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = 'http://localhost:8081';\nconst AUTH_USER = 'authenticatedUser';\nconst USER_ROLE = 'role';\n\nclass AuthenticationService {\n  authenticateUser(user) {\n    return axios.get(API_URL + '/user/signin', {\n      headers: {\n        authorization: this.createBasicAuthToken(user.email, user.password)\n      }\n    });\n  }\n\n  authenticateUserByRole(email, role) {\n    let request = {\n      email: email,\n      role: role\n    };\n    return axios.post(API_URL + '/user/role-auth', request);\n  }\n\n  createBasicAuthToken(email, password) {\n    return 'Basic ' + window.btoa(email + \":\" + password);\n  }\n  /*  getUserdetails() {\r\n       let user = sessionStorage.getItem('authUser');\r\n       let role = sessionStorage.getItem('role');\r\n       return [user, role];\r\n      } */\n\n\n  registerSuccessfulLogin(user) {\n    console.log('resisterSuccessful login');\n    sessionStorage.setItem(AUTH_USER, user.userName);\n    sessionStorage.setItem(USER_ROLE, user.roles);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(user.email, user.password));\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(AUTH_USER);\n    if (user != null) return true;else return false;\n  }\n\n  userSignUp(user) {\n    return axios.post(API_URL + '/user/signup', user);\n  }\n\n  logout() {\n    sessionStorage.removeItem(AUTH_USER);\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"names":["axios","API_URL","AUTH_USER","USER_ROLE","AuthenticationService","authenticateUser","user","get","headers","authorization","createBasicAuthToken","email","password","authenticateUserByRole","role","request","post","window","btoa","registerSuccessfulLogin","console","log","sessionStorage","setItem","userName","roles","setupAxiosInterceptors","isUserLoggedIn","getItem","userSignUp","logout","removeItem","basicAuthHeader","interceptors","use","config"],"sources":["C:/Users/saura/Documents/Blog-web-app/blog-app/src/service/AuthenticationService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = 'http://localhost:8081'\r\nconst AUTH_USER = 'authenticatedUser'\r\nconst USER_ROLE = 'role'\r\n\r\nclass AuthenticationService {\r\n\r\n\r\n\r\n    authenticateUser(user) {\r\n        return axios.get(API_URL + '/user/signin',\r\n            { headers: { authorization: this.createBasicAuthToken(user.email, user.password) } })\r\n\r\n    }\r\n\r\n    authenticateUserByRole(email,role){\r\n        let request = {email : email, role : role}\r\n        return axios.post(API_URL+'/user/role-auth',request)\r\n    }\r\n\r\n    createBasicAuthToken(email, password) {\r\n        return 'Basic ' + window.btoa(email + \":\" + password)\r\n    }\r\n\r\n    /*  getUserdetails() {\r\n         let user = sessionStorage.getItem('authUser');\r\n         let role = sessionStorage.getItem('role');\r\n         return [user, role];\r\n \r\n     } */\r\n\r\n    registerSuccessfulLogin(user) {\r\n        console.log('resisterSuccessful login')\r\n        sessionStorage.setItem(AUTH_USER, user.userName)\r\n        sessionStorage.setItem(USER_ROLE,user.roles)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(user.email, user.password))\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(AUTH_USER)\r\n        if (user != null)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    userSignUp(user) {\r\n        return axios.post(API_URL + '/user/signup', user);\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(AUTH_USER)\r\n    }\r\n\r\n    setupAxiosInterceptors(basicAuthHeader) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = basicAuthHeader;\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default new AuthenticationService();"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,SAAS,GAAG,mBAAlB;AACA,MAAMC,SAAS,GAAG,MAAlB;;AAEA,MAAMC,qBAAN,CAA4B;EAIxBC,gBAAgB,CAACC,IAAD,EAAO;IACnB,OAAON,KAAK,CAACO,GAAN,CAAUN,OAAO,GAAG,cAApB,EACH;MAAEO,OAAO,EAAE;QAAEC,aAAa,EAAE,KAAKC,oBAAL,CAA0BJ,IAAI,CAACK,KAA/B,EAAsCL,IAAI,CAACM,QAA3C;MAAjB;IAAX,CADG,CAAP;EAGH;;EAEDC,sBAAsB,CAACF,KAAD,EAAOG,IAAP,EAAY;IAC9B,IAAIC,OAAO,GAAG;MAACJ,KAAK,EAAGA,KAAT;MAAgBG,IAAI,EAAGA;IAAvB,CAAd;IACA,OAAOd,KAAK,CAACgB,IAAN,CAAWf,OAAO,GAAC,iBAAnB,EAAqCc,OAArC,CAAP;EACH;;EAEDL,oBAAoB,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAClC,OAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,KAAK,GAAG,GAAR,GAAcC,QAA1B,CAAlB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EAGIO,uBAAuB,CAACb,IAAD,EAAO;IAC1Bc,OAAO,CAACC,GAAR,CAAY,0BAAZ;IACAC,cAAc,CAACC,OAAf,CAAuBrB,SAAvB,EAAkCI,IAAI,CAACkB,QAAvC;IACAF,cAAc,CAACC,OAAf,CAAuBpB,SAAvB,EAAiCG,IAAI,CAACmB,KAAtC;IACA,KAAKC,sBAAL,CAA4B,KAAKhB,oBAAL,CAA0BJ,IAAI,CAACK,KAA/B,EAAsCL,IAAI,CAACM,QAA3C,CAA5B;EACH;;EAEDe,cAAc,GAAG;IACb,IAAIrB,IAAI,GAAGgB,cAAc,CAACM,OAAf,CAAuB1B,SAAvB,CAAX;IACA,IAAII,IAAI,IAAI,IAAZ,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;EACP;;EAEDuB,UAAU,CAACvB,IAAD,EAAO;IACb,OAAON,KAAK,CAACgB,IAAN,CAAWf,OAAO,GAAG,cAArB,EAAqCK,IAArC,CAAP;EACH;;EAEDwB,MAAM,GAAG;IACLR,cAAc,CAACS,UAAf,CAA0B7B,SAA1B;EACH;;EAEDwB,sBAAsB,CAACM,eAAD,EAAkB;IAEpChC,KAAK,CAACiC,YAAN,CAAmBlB,OAAnB,CAA2BmB,GAA3B,CACKC,MAAD,IAAY;MACR,IAAI,KAAKR,cAAL,EAAJ,EAA2B;QACvBQ,MAAM,CAAC3B,OAAP,CAAeC,aAAf,GAA+BuB,eAA/B;MACH;;MACD,OAAOG,MAAP;IACH,CANL;EAQH;;AA3DuB;;AAgE5B,eAAe,IAAI/B,qBAAJ,EAAf"},"metadata":{},"sourceType":"module"}